generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TrackMeta {
  id         String      @id @default(uuid())
  name       String
  type       String
  remark     String      @default("")
  createTime DateTime    @default(now())
  updateTime DateTime    @default(now())
  deletedAt  DateTime?
  countItems TrackItem[]
}

model TrackItem {
  id          String     @id @default(uuid())
  remark      String
  createTime  DateTime   @default(now())
  updateTime  DateTime   @default(now())
  countMetaId String?
  deletedAt   DateTime?
  countMeta   TrackMeta? @relation(fields: [countMetaId], references: [id])
}

model Task {
  id         String    @id @default(uuid())
  name       String
  remark     String
  createTime DateTime  @default(now())
  updateTime DateTime  @default(now())
  deletedAt  DateTime?
  status     String
}

model Bookmark {
  id         String        @id @default(uuid())
  url        String        @unique
  remark     String?
  createTime DateTime      @default(now())
  updateTime DateTime      @default(now())
  deletedAt  DateTime?
  image      String?
  summary    String?
  title      String?
  loading    Boolean       @default(true)
  tags       BookmarkTag[] @relation("BookmarkToBookmarkTag")
}

model BookmarkTag {
  id         String     @id @default(uuid())
  name       String
  remark     String?
  createTime DateTime   @default(now())
  updateTime DateTime   @default(now())
  deletedAt  DateTime?
  bookmarks  Bookmark[] @relation("BookmarkToBookmarkTag")
}

model Anniversary {
  id         String    @id @default(uuid())
  name       String
  remark     String
  createTime DateTime  @default(now())
  updateTime DateTime  @default(now())
  deletedAt  DateTime?
  date       DateTime
}


model Media {
  id              Int       @id @default(autoincrement())
  width           Int?
  height          Int?
  postId          String?
  originSrc       String?
  userId          String?
  createTime      DateTime? @default(now())
  deletedAt       DateTime?
  updateTime      DateTime  @default(now())
  galleryMediaUrl String?
  originMediaUrl  String?
  status         UploadStatus @default(PENDING)

  @@index([userId])
  @@index([createTime])
}

enum UploadStatus {
  PENDING   // 待上传
  UPLOADED  // 已上传
  FAILED    // 上传失败
}

model Producer {
  id            String    @id @default(cuid())
  weiboIds      String[] @default([])
  xiaohongshuIds String[] @default([])
  douyinIds     String[] @default([])
  weiboChaohua  String?
  createTime    DateTime  @default(now())
  updateTime    DateTime  @default(now())
  deletedAt     DateTime?
  name          String?

  @@map("producer")
}